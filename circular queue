#include <stdio.h>
#define MAXSIZE 5

// isFull
void isFull(int front, int rear) {
    if ((rear + 1) % MAXSIZE == front)
        printf("Circular queue is full\n");
    else
        printf("Circular queue is not full\n");
}

// isEmpty
void isEmpty(int front, int rear) {
    if (front == -1)
        printf("Circular queue is empty\n");
    else
        printf("Circular queue is not empty\n");
}

// Enqueue
void enqueue(int data, int *front, int *rear, int cqueue[]) {
    if (((*rear + 1) % MAXSIZE) == *front) {
        printf("Circular queue is full, insertion is not possible\n");
    } else {
        if (*front == -1) { 
            *front = 0;
            *rear = 0;
        } else if (*rear == MAXSIZE - 1) {
            *rear = 0;
        } else {
            (*rear)++;
        }
        cqueue[*rear] = data;
        printf("Inserted %d\n", data);
    }
}

// Dequeue
int dequeue(int cqueue[], int *front, int *rear) {
    int item = -999;
    if (*front == -1) {
        printf("Queue is empty, deletion is not possible\n");
    } else {
        item = cqueue[*front];
        if (*front == *rear) { 
            *front = -1;
            *rear = -1;
        } else if (*front == MAXSIZE - 1) {
            *front = 0;
        } else {
            (*front)++;
        }
    }
    return item;
}

// Peek
int peek(int cqueue[], int front, int rear) {
    int item = -999;
    if (rear == -1) {
        printf("Circular queue is empty\n");
    } else {
        item = cqueue[front];
    }
    return item;
}

// Display
void display(int cq[], int front, int rear) {
    if (rear == -1) {
        printf("There are no elements in the circular queue.\n");
    } else {
        printf("Circular queue is: ");
        if (front > rear) {
            for (int i = front; i < MAXSIZE; i++)
                printf("%d ", cq[i]);
            for (int i = 0; i <= rear; i++)
                printf("%d ", cq[i]);
        } else {
            for (int i = front; i <= rear; i++)
                printf("%d ", cq[i]);
        }
        printf("\n");
    }
}

// Main with switch case
int main() {
    int cqueue[MAXSIZE];
    int front = -1, rear = -1;
    int choice, item;

    while (1) {
        printf("\n--- Circular Queue Menu ---\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Check if Full\n");
        printf("6. Check if Empty\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to insert: ");
                scanf("%d", &item);
                enqueue(item, &front, &rear, cqueue);
                break;
            case 2:
                item = dequeue(cqueue, &front, &rear);
                if (item != -999)
                    printf("Deleted element: %d\n", item);
                break;
            case 3:
                item = peek(cqueue, front, rear);
                if (item != -999)
                    printf("Front element: %d\n", item);
                break;
            case 4:
                display(cqueue, front, rear);
                break;
            case 5:
                isFull(front, rear);
                break;
            case 6:
                isEmpty(front, rear);
                break;
            case 7:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
}
